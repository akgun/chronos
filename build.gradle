ext {
    libs = [guice    : 'com.google.inject:guice:4.0',
            gson     : 'com.google.code.gson:gson:2.4',
            joda     : 'joda-time:joda-time:2.8.2',
            junit    : 'junit:junit:4.12',
            hamcrest : 'org.hamcrest:hamcrest-all:1.3',
            log4j    : 'org.apache.logging.log4j:log4j-core:2.5',
            manifests: 'com.jcabi:jcabi-manifests:1.1',
            mockito  : 'org.mockito:mockito-all:1.10.19']

    chronosQualifier = [group: 'com.akgund.chronos', version: '1.0.2']
}

allprojects {
    group = chronosQualifier.group
    version = chronosQualifier.version

    apply plugin: 'idea'
}

subprojects {
    apply plugin: 'java'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    apply from: "$rootDir/gradle/jacoco.gradle"

    test {
        doLast {
            tasks.jacocoTestReport.execute()
        }
    }
}

project(':chronos-core') {
    dependencies {
        compile libs.guice
        compile libs.gson
        compile libs.joda
        compile libs.log4j

        testCompile libs.junit
        testCompile libs.hamcrest
        testCompile libs.mockito
    }
}

project(':chronos-util') {
    dependencies {
        compile libs.joda
        compile libs.log4j

        testCompile libs.junit
        testCompile libs.hamcrest
        testCompile libs.mockito
    }
}

project(':chronos-gui') {
    dependencies {
        compile project(':chronos-core')
        compile project(':chronos-util')

        compile libs.joda
        compile libs.log4j
        compile libs.manifests
    }

    ext {
        chronosMainClass = 'com.akgund.chronos.gui.Program'
    }

    task fatJar(type: Jar, description: 'Builds a runnable jar.', group: 'Chronos Utils') {
        manifest {
            attributes 'Main-Class': chronosMainClass,
                    'Chronos-Version': chronosQualifier.version
        }

        baseName = rootProject.name
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }
    build.dependsOn fatJar

    task runApp(type: JavaExec, description: 'Runs main class.', group: 'Chronos Utils') {
        classpath = sourceSets.main.runtimeClasspath

        main = chronosMainClass

        /* Enable flight recorder. */
        jvmArgs '-XX:+UnlockCommercialFeatures', '-XX:+FlightRecorder'
    }
}